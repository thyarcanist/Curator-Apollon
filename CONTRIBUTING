# Contributing to Curator Apollon

Welcome, and thank you for considering contributing to Curator Apollon! We're excited to build a unique tool for deep music analysis and truly personalized discovery. Your input is valuable, especially in the early stages.

## Our Vision: Your Sonic Shadow

Curator Apollon aims to be more than just a music player or recommendation engine. The goal is for its discovery features to reflect *you*, the user, in songform. We call this the "song shadowform" â€“ a set of recommendations that resonate deeply with your unique musical taste, going beyond simple genre matches into the nuanced characteristics that make music speak to you. It's for the serious music listener, the audiophile, the sonic explorer.

## How You Can Contribute

There are several ways you can help make Curator Apollon better:

### 1. Community-Sourced Metadata (Crucial!)

**The Challenge:** Public music metadata APIs (like Spotify's) can be limited in depth, accuracy for niche genres, or may not provide all the nuanced data points we envision (e.g., precise sub-genres, mood, timbre, detailed instrumentation). TuneBat, while useful, lacks a public API.

**How You Can Help:**
- **Identify Missing/Incorrect Data:** As you use Curator Apollon with your library, you might notice tracks where the imported metadata (BPM, Key, Camelot, Time Signature, Genres) is off or incomplete.
- **Suggest Richer Metadata:** We're particularly interested in:
    - Accurate BPM, Key, Camelot, and Time Signatures.
    - Detailed and nuanced genre classifications (e.g., not just "Electronic" but "Ambient Techno" or "Progressive Psytrance").
    - Potentially, in the future: mood descriptors (e.g., melancholic, energetic, introspective), instrumentation details, or other relevant musical attributes.
- **Submission Process - Using `contributions.json`:**
    Curator Apollon can load supplementary metadata from a local `contributions.json` file located in its application data directory. This allows you to directly enhance your local library with more accurate or detailed information.

    1.  **Location:**
        -   Windows: `%APPDATA%\CuratorApollon\contributions.json` (e.g., `C:\Users\YourUser\AppData\Roaming\CuratorApollon\contributions.json`)
        -   Linux/macOS: `~/.local/share/CuratorApollon/contributions.json`

    2.  **Format:** The `contributions.json` file should be an array of JSON objects. Each object represents a contribution for a specific track and should match the structure defined in `src/models/contributions.py` (class `TrackContribution`).
        Key fields include:
        -   `track_id_spotify` (string, required): The Spotify track ID (e.g., "spotify:track:xxxxxxxxxxxxxxx"). This is used to match the contribution to a track in your library.
        -   `bpm` (float, optional)
        -   `key` (string, optional)
        -   `time_signature` (string, optional)
        -   `camelot_key` (string, optional)
        -   `genre_keywords` (list of strings, optional)
        -   `source_description` (string, optional): e.g., "Manual analysis via Traktor"
        -   `confidence` (float, optional): e.g., 0.0 to 1.0

        Example `contributions.json`:
        ```json
        [
            {
                "track_id_spotify": "spotify:track:yourTrackIdHere1",
                "bpm": 125.0,
                "key": "Am",
                "camelot_key": "1A",
                "genre_keywords": ["Techno", "Deep Techno"],
                "source_description": "Manual analysis"
            },
            {
                "track_id_spotify": "spotify:track:yourTrackIdHere2",
                "time_signature": "3/4",
                "genre_keywords": ["Ambient", "Experimental"]
            }
        ]
        ```

    3.  **Generating `contributions.json`:**
        -   You can create or edit this JSON file manually.
        -   For managing larger sets of contributions, you might consider using a spreadsheet program (like Google Sheets, Excel, LibreOffice Calc). You could define columns corresponding to the fields above, fill in your data, and then export the sheet to CSV.
        -   You would then need a script or tool to convert the CSV data into the correct JSON format described above. The community might share such tools over time.
        -   Alternatively, a collaborative approach could involve using a shared Google Form that populates a Google Sheet. The maintainers or community members could then periodically export and convert this sheet to a distributable `contributions.json` template or example.

    4.  **Using GitHub for Discussion:** While individual metadata points are best managed via your local `contributions.json`, GitHub Issues remain the place to:
        -   Discuss the `contributions.json` format and the `TrackContribution` model.
        -   Propose new fields or types of metadata to be supported.
        -   Share or request tools/scripts for converting spreadsheet data (like CSV) to the `contributions.json` format.
        -   Report any bugs or issues with how Curator Apollon loads or applies data from `contributions.json`.

This local `contributions.json` system is the first step towards a more robust way for users to manage and enhance their music metadata. Future developments might explore ways to share or federate these contributions more broadly.

### 2. Refining the Recommendation Engine (`EntropyService`)

The `EntropyService` is the heart of our discovery feature. It uses quantum randomness and dynamic compatibility rules. We want to make this as sophisticated and insightful as possible.

**How You Can Help:**
- **Discuss Algorithms:** Share your ideas on improving the compatibility logic (`_is_compatible`, `_is_key_compatible`, etc.). How can we better define musical "resonance" or "divergence"?
- **Propose Enhancements:** Suggest new parameters or logic for the `EntropyService` that could lead to more interesting or personalized recommendations.
- **Achieving the "Song Shadowform":** Brainstorm on how the recommendation engine can truly learn and reflect a user's nuanced taste profile. This could involve thinking about long-term listening history analysis, explicit feedback mechanisms, or more advanced data modeling (see "Potential Future Enhancements" in `README.md`).
- **Open a GitHub Issue or Discussion:** Share your thoughts, critiques, and suggestions for the recommendation logic.

### 3. Feature Suggestions

Have an idea for a new feature or an improvement to an existing one? We'd love to hear it! Please open a GitHub Issue, describe your idea, and explain how it would benefit users.

### 4. Bug Reports

If you encounter a bug, please help us by reporting it:
- Open a GitHub Issue.
- Describe the bug clearly: What did you do? What did you expect to happen? What actually happened?
- Include steps to reproduce the bug.
- Provide your OS, Python version, and any relevant error messages or screenshots.

### 5. Code Contributions

If you're interested in contributing code, that's fantastic! Here's a general guideline:

- **Development Environment:**
    - Curator Apollon is a Python application.
    - Ensure you have a recent version of Python 3 installed.
    - It's highly recommended to use a virtual environment (e.g., `venv`, `conda`).
    - Install dependencies: `pip install -r requirements.txt`.
- **Coding Style:** Aim for clean, readable, and well-commented Python code. We generally follow PEP 8 guidelines.
- **Pull Request Process:**
    1. Fork the repository.
    2. Create a new branch for your feature or bugfix (e.g., `feature/new-analysis-metric` or `fix/recommendation-crash`).
    3. Make your changes. Commit frequently with clear, descriptive messages.
    4. Ensure your changes don't break existing functionality (testing your changes is crucial).
    5. Push your branch to your fork.
    6. Open a Pull Request against the `main` branch of this repository.
    7. Provide a clear title and description for your PR, explaining the changes and why they were made.

## Regarding the Quantum Entropy Source (Occybyte API)

A core principle of Curator Apollon is the use of *true* quantum randomness for its discovery features, sourced from the Occybyte API. There is **no fallback to Pseudo-Random Number Generators (PRNGs)**.

- **API Key Access (Free Tier Available):** Occybyte provides a **free tier API key upon user authentication**, which grants access to quantum random bytes. This free tier typically provides a set amount of data per request (e.g., 512 bytes).
    - This is generally sufficient for testing the `EntropyService` and its recommendation generation, as the `get_quantum_random_bytes` method can be called multiple times if more bytes are needed for operations like shuffling a large list of potential tracks.
    - To use this, you will need to authenticate with Occybyte to obtain your API key and then configure it along with the API link as environment variables (`Occybyte_API_KEY`, `Occybyte_API_LINK`) loaded via a `.env` file in the project root.

- **Developing and Testing `EntropyService`:**
    - With the free tier API key, you can directly test the full functionality of the `EntropyService`.
    - If you prefer not to authenticate for an API key, or if you are designing complex scenarios that might hypothetically exceed rapid free tier usage, contributions to the *logic, algorithms, and theoretical underpinnings* of the `EntropyService` are still highly valuable. You can develop and test these aspects by:
        - Focusing on the code structure and functions within `entropy_service.py` that *don't* directly make the API call.
        - Mocking the `get_quantum_random_bytes` method to return predictable byte strings for testing specific shuffle or selection scenarios.
        - Participating in discussions about improving the recommendation quality regardless of the random data source's immediate availability during your local development.

We are exploring ways to make testing even smoother for contributors in the future, but the integrity of using a true quantum source for the core functionality remains paramount.

## Questions or Discussions?

If you have questions, want to discuss ideas, or need clarification, please feel free to:
- Open a **GitHub Issue** with the `question` or `discussion` label.
- (If enabled) Participate in **GitHub Discussions** on the repository.

Thank you for helping us shape Curator Apollon!